global:
  resolve_timeout: 5m
  smtp_from: 'ovncp-alerts@example.com'
  smtp_smarthost: 'smtp.example.com:587'
  smtp_auth_username: 'alerts@example.com'
  smtp_auth_password: 'smtp-password'
  slack_api_url: 'YOUR_SLACK_WEBHOOK_URL'
  pagerduty_url: 'https://events.pagerduty.com/v2/enqueue'

# Templates for notifications
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Route tree
route:
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 10s
  group_interval: 10s
  repeat_interval: 1h
  receiver: 'default'
  
  routes:
    # Critical alerts go to PagerDuty
    - match:
        severity: critical
      receiver: pagerduty
      continue: true
      
    # All alerts also go to Slack
    - match_re:
        severity: warning|critical
      receiver: slack
      continue: true
      
    # SLO breaches have special handling
    - match:
        slo: availability
      receiver: slo-team
      group_by: ['slo']
      
    # Database alerts go to DBA team
    - match:
        component: database
      receiver: dba-team

# Receivers
receivers:
  - name: 'default'
    email_configs:
      - to: 'ovncp-team@example.com'
        headers:
          Subject: '[{{ .Status | toUpper }}] OVN Control Platform Alert: {{ .GroupLabels.alertname }}'
        html: |
          <h2>{{ .Status | toUpper }}: {{ .GroupLabels.alertname }}</h2>
          <p><b>Service:</b> {{ .GroupLabels.service }}</p>
          <p><b>Component:</b> {{ .CommonLabels.component }}</p>
          
          {{ range .Alerts }}
          <hr>
          <p><b>Alert:</b> {{ .Labels.alertname }}</p>
          <p><b>Severity:</b> {{ .Labels.severity }}</p>
          <p><b>Summary:</b> {{ .Annotations.summary }}</p>
          <p><b>Description:</b> {{ .Annotations.description }}</p>
          {{ if .Annotations.runbook_url }}
          <p><b>Runbook:</b> <a href="{{ .Annotations.runbook_url }}">{{ .Annotations.runbook_url }}</a></p>
          {{ end }}
          <p><b>Started:</b> {{ .StartsAt }}</p>
          {{ end }}

  - name: 'slack'
    slack_configs:
      - channel: '#ovncp-alerts'
        title: 'OVN Control Platform Alert'
        title_link: 'http://grafana.example.com/d/ovncp-overview'
        pretext: '{{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Labels.alertname }}
          *Severity:* {{ .Labels.severity }}
          *Component:* {{ .Labels.component }}
          *Summary:* {{ .Annotations.summary }}
          *Description:* {{ .Annotations.description }}
          {{ end }}
        send_resolved: true
        color: '{{ if eq .Status "firing" }}{{ if eq .CommonLabels.severity "critical" }}danger{{ else }}warning{{ end }}{{ else }}good{{ end }}'

  - name: 'pagerduty'
    pagerduty_configs:
      - service_key: 'YOUR_PAGERDUTY_SERVICE_KEY'
        description: '{{ .GroupLabels.alertname }}: {{ .CommonAnnotations.summary }}'
        details:
          firing: '{{ .Alerts.Firing | len }}'
          resolved: '{{ .Alerts.Resolved | len }}'
          service: '{{ .GroupLabels.service }}'
          component: '{{ .CommonLabels.component }}'
          severity: '{{ .CommonLabels.severity }}'

  - name: 'slo-team'
    email_configs:
      - to: 'slo-team@example.com'
        headers:
          Subject: '[SLO BREACH] {{ .GroupLabels.slo }} - OVN Control Platform'
    slack_configs:
      - channel: '#slo-breaches'
        title: 'SLO Breach: {{ .GroupLabels.slo }}'
        color: 'danger'

  - name: 'dba-team'
    email_configs:
      - to: 'dba-team@example.com'
        headers:
          Subject: '[DATABASE] OVN Control Platform Alert: {{ .GroupLabels.alertname }}'

# Inhibition rules
inhibit_rules:
  # Inhibit warning alerts when critical alerts are firing for the same component
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'service', 'component']
    
  # Inhibit all alerts when the API is down
  - source_match:
      alertname: 'OVNCPAPIDown'
    target_match_re:
      alertname: '.*'
    equal: ['service']